import { 입력값타입, 세액공제결과, 미래자산결과, 연금수령시뮬레이션결과, 자산변화시뮬레이션결과, 자산변화연차데이터, 투자비교결과, 투자비교연차데이터 } from '../types';

// 모듈 1: 세액공제 계산 (세제혜택 구분 반영)
export function 세액공제계산(입력값: 입력값타입): 세액공제결과 {
  const { 
    총급여액, 
    연금저축납입액, 
    연금저축한도초과납입액,
    IRP납입액, 
    IRP한도초과납입액 
  } = 입력값;
  
  // 1. 총 납입액 계산 (세액공제 대상 + 한도 초과분)
  const 총납입액 = 연금저축납입액 + 연금저축한도초과납입액 + IRP납입액 + IRP한도초과납입액;
  
  // 2. 세액공제 대상금액 계산 (한도 적용)
  const 연금저축한도 = 6000000; // 연금저축 한도 600만원
  const 전체한도 = 9000000; // 전체 한도 900만원
  
  const 연금저축세액공제대상 = Math.min(연금저축납입액, 연금저축한도);
  const IRP세액공제가능한도 = 전체한도 - 연금저축세액공제대상;
  const IRP세액공제대상 = Math.min(IRP납입액, IRP세액공제가능한도);
  
  const 세액공제대상금액 = 연금저축세액공제대상 + IRP세액공제대상;
  const 세액공제한도초과금액 = 연금저축한도초과납입액 + IRP한도초과납입액 + 
                        Math.max(0, 연금저축납입액 - 연금저축세액공제대상) +
                        Math.max(0, IRP납입액 - IRP세액공제대상);
  
  // 3. 세액공제율 결정 (지방소득세 포함)
  const 적용세율 = (총급여액 <= 55000000) ? 0.165 : 0.132;
  
  // 4. 최종 예상 환급 세액 계산
  const 예상환급액 = Math.round(세액공제대상금액 * 적용세율);
  
  return {
    총납입액,
    세액공제대상금액,
    세액공제한도초과금액,
    적용세율,
    예상환급액,
  };
}

// 모듈 2: 미래 자산 계산 (세제혜택 구분 반영)
export function 미래자산계산(입력값: 입력값타입, 세액공제결과: 세액공제결과): 미래자산결과 {
  const { 현재나이, 은퇴나이, 연평균수익률 } = 입력값;
  const { 총납입액, 세액공제대상금액, 세액공제한도초과금액 } = 세액공제결과;
  
  // 1. 납입 기간 계산
  const 납입기간 = 은퇴나이 - 현재나이;
  
  // 2. 연간 납입액 구분 (정확한 계산)
  const 연간세액공제대상금액 = 세액공제대상금액;
  const 연간한도초과금액 = 세액공제한도초과금액;
  const 연간총납입액 = 총납입액;
  
  // 3. 미래가치 계산 함수 (연금 적립식)
  function 미래가치계산(연간납입액: number): number {
    const 수익률 = 연평균수익률 / 100;
    
    if (수익률 === 0) {
      return 연간납입액 * 납입기간;
    } else {
      return 연간납입액 * (((1 + 수익률) ** 납입기간 - 1) / 수익률);
    }
  }
  
  // 4. 구분별 미래가치 계산
  const 세액공제대상원금미래가치 = Math.round(미래가치계산(연간세액공제대상금액));
  const 비과세원금미래가치 = Math.round(미래가치계산(연간한도초과금액));
  const 총미래가치 = 세액공제대상원금미래가치 + 비과세원금미래가치;

  // 5. 원금과 수익 구분
  const 총납입원금 = 연간총납입액 * 납입기간;
  // PRD v2.4: 비과세원금은 세액공제 한도를 초과하는 실제 납입 원금
  const 비과세원금 = Math.max(연간총납입액 - 9000000, 0) * 납입기간;
  const 총예상수익 = 총미래가치 - 총납입원금;

  return {
    총납입원금,
    세액공제대상원금: 세액공제대상원금미래가치, // 세액공제 받은 원금의 미래가치 (과세 대상)
    비과세원금, // PRD v2.4: 비과세 재원(실제 납입 원금)
    총예상수익,
    총미래가치,
  };
}

// 연금소득공제 계산 함수
function 연금소득공제계산(수령액: number): number {
  let 공제액: number;
  
  if (수령액 <= 3500000) {
    공제액 = 수령액;
  } else if (수령액 <= 7000000) {
    공제액 = 3500000 + (수령액 - 3500000) * 0.4;
  } else if (수령액 <= 14000000) {
    공제액 = 4900000 + (수령액 - 7000000) * 0.2;
  } else {
    공제액 = 6300000 + (수령액 - 14000000) * 0.1;
  }
  
  // 최대 한도 900만원
  return Math.min(공제액, 9000000);
}

// 누진세율표 계산 함수
function 소득세계산(과세표준: number): number {
  const 구간들 = [
    { 한도: 14000000, 세율: 0.06, 누진공제: 0 },
    { 한도: 50000000, 세율: 0.15, 누진공제: 1260000 },
    { 한도: 88000000, 세율: 0.24, 누진공제: 5760000 },
    { 한도: 150000000, 세율: 0.35, 누진공제: 15440000 },
    { 한도: 300000000, 세율: 0.38, 누진공제: 19940000 },
    { 한도: 500000000, 세율: 0.40, 누진공제: 25940000 },
    { 한도: 1000000000, 세율: 0.42, 누진공제: 35940000 },
    { 한도: Infinity, 세율: 0.45, 누진공제: 65940000 },
  ];
  
  for (const 구간 of 구간들) {
    if (과세표준 <= 구간.한도) {
      return Math.max(0, 과세표준 * 구간.세율 - 구간.누진공제);
    }
  }
  
  return 0;
}

// 저율과세 세율 결정 함수
function 저율과세세율결정(수령시작나이: number): number {
  if (수령시작나이 < 70) {
    return 0.055;
  } else if (수령시작나이 < 80) {
    return 0.044;
  } else {
    return 0.033;
  }
}

// 모듈 3: 연금 수령 시뮬레이션 (세제혜택 구분 과세 반영)
export function 연금수령시뮬레이션계산(
  입력값: 입력값타입,
  미래자산결과: 미래자산결과,
  수령시작나이: number
): 연금수령시뮬레이션결과 {
  const { 연간수령액, 연금외소득 } = 입력값;

  // 1. 모듈 3은 "비과세원금 소진 후" 가정이므로 연간수령액 전액이 과세대상
  // 실제 비과세원금 비율 계산은 모듈 4에서만 사용
  const 연간과세대상금액 = 연간수령액; // 전액 과세 가정
  
  // 2. 1,500만원 기준 판별 (연간 수령액 기준, 과세대상 아님)
  const 기준금액초과여부 = 연간수령액 > 15000000;
  
  // 저율과세 계산 (1,500만원 이하일 때, 전액 과세 가정)
  const 저율세율 = 저율과세세율결정(수령시작나이);
  const 저율총납부세액 = Math.round(연간수령액 * 저율세율);
  const 저율세후실수령액 = 연간수령액 - 저율총납부세액;
  
  const 저율과세 = {
    적용세율: 저율세율,
    총납부세액: 저율총납부세액,
    세후실수령액: 저율세후실수령액,
  };
  
  // 종합과세 계산 (PRD 명세: 연금소득금액에서 인적공제를 차감하여 과세표준 산출)
  const 연금소득공제액 = Math.round(연금소득공제계산(연간과세대상금액));
  const 연금소득금액 = Math.max(0, 연간과세대상금액 - 연금소득공제액);
  const 총소득금액 = 연금소득금액 + 연금외소득;

  // PRD 명세: 인적공제(본인 기본공제) 적용
  const 인적공제 = 1500000; // 본인 기본공제 150만원
  const 과세표준 = Math.max(0, 총소득금액 - 인적공제);
  const 산출소득세 = Math.round(소득세계산(과세표준));
  const 지방소득세 = Math.round(산출소득세 * 0.1);
  const 종합총납부세액 = 산출소득세 + 지방소득세;
  const 종합세후실수령액 = 연간수령액 - 종합총납부세액;
  

  
  const 종합과세 = {
    연금소득공제액,
    연금소득금액,
    총소득금액,
    인적공제,
    과세표준,
    산출소득세,
    지방소득세,
    총납부세액: 종합총납부세액,
    세후실수령액: 종합세후실수령액,
  };
  
  // 분리과세 계산 (1,500만원 초과시, 과세 대상 금액에만 16.5% 적용)
  const 분리적용세율 = 0.165;
  const 분리총납부세액 = Math.round(연간과세대상금액 * 분리적용세율);
  const 분리세후실수령액 = 연간수령액 - 분리총납부세액;
  
  const 분리과세 = {
    적용세율: 분리적용세율,
    총납부세액: 분리총납부세액,
    세후실수령액: 분리세후실수령액,
  };
  
  return {
    기준금액초과여부,
    종합과세,
    분리과세,
    저율과세,
  };
}

// 모듈 4: 자산 변화 시뮬레이션 계산 (PRD v2.4: 비과세원금 우선 인출 로직)
export function 자산변화시뮬레이션계산(
  시작자산: number,
  연평균수익률: number,
  연간수령요청액: number,
  은퇴나이: number,
  비과세원금: number,
  종합과세납부세액: number
): 자산변화시뮬레이션결과 {
  const 연차별데이터: 자산변화연차데이터[] = [];
  let 현재자산 = 시작자산;
  let 비과세원금잔액 = 비과세원금;
  let 연차 = 1;
  let 현재나이 = 은퇴나이;

  // 자산이 고갈될 때까지 시뮬레이션 (100세까지)
  const 최대나이 = 100;
  const 최대연차 = 최대나이 - 은퇴나이;
  while (현재자산 >= 연간수령요청액 && 연차 <= 최대연차) { // 100세까지 또는 자산 고갈시까지
    const 기초자산 = 현재자산;
    const 연간운용수익 = Math.round(기초자산 * (연평균수익률 / 100));

    // PRD v2.4: 비과세원금 우선 인출 로직 (부분 과세 적용)
    let 납부세액 = 0;
    let 세후인출액 = 연간수령요청액;
    const 세전인출액 = 연간수령요청액;

    if (비과세원금잔액 >= 연간수령요청액) {
      // 비과세원금이 연간수령액 이상인 경우: 전액 비과세
      납부세액 = 0;
      세후인출액 = 연간수령요청액;
      비과세원금잔액 = 비과세원금잔액 - 연간수령요청액;
    } else if (비과세원금잔액 > 0) {
      // 비과세원금이 일부 남아있는 경우: 부분 과세
      const 비과세인출액 = 비과세원금잔액;
      const 과세인출액 = 연간수령요청액 - 비과세인출액;

      // 과세 부분에만 세금 적용 (비율 계산)
      const 과세비율 = 과세인출액 / 연간수령요청액;
      납부세액 = Math.round(종합과세납부세액 * 과세비율);
      세후인출액 = 연간수령요청액 - 납부세액;
      비과세원금잔액 = 0;
    } else {
      // 비과세원금 완전 소진된 경우: 전액 과세
      납부세액 = 종합과세납부세액;
      세후인출액 = 연간수령요청액 - 납부세액;
    }

    const 기말자산 = 기초자산 + 연간운용수익 - 세전인출액;

    연차별데이터.push({
      연차,
      나이: 현재나이,
      기초자산: Math.round(기초자산),
      연간운용수익,
      세전인출액,
      납부세액,
      세후인출액: Math.round(세후인출액),
      기말자산: Math.round(기말자산),
      비과세원금잔액: Math.round(비과세원금잔액),
    });

    현재자산 = 기말자산;
    연차++;
    현재나이++;
  }

  const 지속가능년수 = 연차별데이터.length;
  const 예상고갈나이 = 은퇴나이 + 지속가능년수;

  return {
    시작자산,
    연평균수익률,
    연간수령요청액,
    예상고갈나이,
    지속가능년수,
    연차별데이터,
  };
}

// 모듈 5: 투자 방식 비교 (일반계좌 해외주식 vs 연금계좌 해외주식 ETF)
// 연금 방식 수령 시뮬레이션 (모듈 3, 4와 동일하게 매년 인출)
export function 투자비교계산(
  입력값: 입력값타입,
  미래자산결과: 미래자산결과,
  연금수령결과: 연금수령시뮬레이션결과
): 투자비교결과 {
  const { 현재나이, 은퇴나이, 연평균수익률, 연간수령액 } = 입력값;
  const { 총납입원금, 비과세원금 } = 미래자산결과;

  // 투자 기간 및 수령 기간
  const 투자기간 = 은퇴나이 - 현재나이;
  const 최대수령나이 = 100;
  const 최대수령기간 = 최대수령나이 - 은퇴나이;

  // QQQ ETF 기준: 배당수익률 0.47%
  const 배당수익률 = 0.0047;

  // 미래가치 계산 함수 (연금 적립식)
  function 미래가치계산(연간납입액: number): number {
    const 수익률 = 연평균수익률 / 100;

    if (수익률 === 0) {
      return 연간납입액 * 투자기간;
    } else {
      return 연간납입액 * (((1 + 수익률) ** 투자기간 - 1) / 수익률);
    }
  }

  // === 일반계좌 해외주식 투자 (매년 운용 + 필요시 일부 매도) ===
  const 일반계좌연간납입액 = 총납입원금 / 투자기간;
  const 일반계좌총투자원금 = 총납입원금;
  const 일반계좌초기자산 = Math.round(미래가치계산(일반계좌연간납입액));

  // 적립 기간 동안의 배당세 계산
  let 적립기간배당세 = 0;
  let 누적투자액 = 0;

  for (let 년차 = 1; 년차 <= 투자기간; 년차++) {
    누적투자액 += 일반계좌연간납입액;
    const 연간배당금 = 누적투자액 * 배당수익률;
    const 연간배당세 = 연간배당금 * 0.154;
    적립기간배당세 += 연간배당세;
  }

  // === 연금계좌 해외주식 ETF 투자 (연금 방식 수령) ===
  const 연금계좌초기자산 = 일반계좌초기자산; // 동일한 수익률 가정
  let 연금현재자산 = 연금계좌초기자산;
  let 연금비과세원금잔액 = 비과세원금;
  let 연금총세금 = 0;

  // 모듈 3의 종합과세 납부세액 사용
  const 종합과세납부세액 = 연금수령결과.종합과세.총납부세액;

  // 연차별 비교 데이터 배열
  const 연차별비교데이터: 투자비교연차데이터[] = [];

  // 일반계좌 시뮬레이션 변수
  let 일반계좌현재자산 = 일반계좌초기자산;
  let 일반계좌총원금 = 일반계좌총투자원금; // 평균 취득가 추적용
  let 일반계좌총배당세 = 적립기간배당세;
  let 일반계좌총양도세 = 0;

  // 연금 수령 시뮬레이션 (두 계좌 동시 진행)
  for (let 년차 = 1; 년차 <= 최대수령기간; 년차++) {
    // 두 계좌 모두 자산이 부족하면 종료
    if (일반계좌현재자산 < 연간수령액 && 연금현재자산 < 연간수령액) break;

    // === 일반계좌 처리 ===
    let 일반연간세금 = 0;

    if (일반계좌현재자산 >= 연간수령액) {
      // 1. 배당금 수령 및 배당세
      const 연간배당금 = Math.round(일반계좌현재자산 * 배당수익률);
      const 연간배당세 = Math.round(연간배당금 * 0.154);
      일반계좌총배당세 += 연간배당세;
      일반연간세금 += 연간배당세;

      // 2. 자본 수익 (운용 수익)
      const 자본수익률 = 연평균수익률 / 100 - 배당수익률;
      const 연간자본수익 = Math.round(일반계좌현재자산 * 자본수익률);

      // 3. 인출 금액만큼 매도 → 양도소득세 계산
      const 매도금액 = 연간수령액;
      const 매도비율 = 매도금액 / 일반계좌현재자산;
      const 매도원가 = Math.round(일반계좌총원금 * 매도비율);
      const 양도차익 = Math.max(0, 매도금액 - 매도원가);
      const 연간양도세 = Math.round(양도차익 * 0.22);
      일반계좌총양도세 += 연간양도세;
      일반연간세금 += 연간양도세;

      // 4. 자산 업데이트
      일반계좌현재자산 = 일반계좌현재자산 + 연간자본수익 - 매도금액;
      일반계좌총원금 = 일반계좌총원금 - 매도원가;
    }

    // === 연금계좌 처리 ===
    let 연금연간세금 = 0;

    if (연금현재자산 >= 연간수령액) {
      const 연간운용수익 = Math.round(연금현재자산 * (연평균수익률 / 100));

      // 비과세원금 우선 인출 로직
      if (연금비과세원금잔액 >= 연간수령액) {
        연금연간세금 = 0;
        연금비과세원금잔액 -= 연간수령액;
      } else if (연금비과세원금잔액 > 0) {
        const 과세인출액 = 연간수령액 - 연금비과세원금잔액;
        const 과세비율 = 과세인출액 / 연간수령액;
        연금연간세금 = Math.round(종합과세납부세액 * 과세비율);
        연금비과세원금잔액 = 0;
      } else {
        연금연간세금 = 종합과세납부세액;
      }

      연금총세금 += 연금연간세금;
      연금현재자산 = 연금현재자산 + 연간운용수익 - 연간수령액;
    }

    // 누적 세금 계산
    const 일반계좌누적세금 = 일반계좌총배당세 + 일반계좌총양도세;
    const 누적세금차이 = 일반계좌누적세금 - 연금총세금;

    연차별비교데이터.push({
      연차: 년차,
      나이: 은퇴나이 + 년차,
      일반계좌잔액: Math.round(일반계좌현재자산),
      일반계좌연간세금: 일반연간세금,
      연금계좌잔액: Math.round(연금현재자산),
      연금계좌연간세금: 연금연간세금,
      누적세금차이: Math.round(누적세금차이),
    });
  }

  const 일반계좌총세금 = 일반계좌총배당세 + 일반계좌총양도세;
  const 연금계좌총세금 = Math.round(연금총세금);
  const 일반계좌세후수령액 = 일반계좌초기자산 - 일반계좌총세금;
  const 연금계좌세후수령액 = 연금계좌초기자산 - 연금계좌총세금;

  // === 절약 효과 계산 ===
  const 세금절약액 = 일반계좌총세금 - 연금계좌총세금;
  const 절약률 = 일반계좌총세금 > 0 ? (세금절약액 / 일반계좌총세금) * 100 : 0;
  const 추가수익률 = 일반계좌총투자원금 > 0 ? (세금절약액 / 일반계좌총투자원금) * 100 : 0;

  return {
    일반계좌투자: {
      총투자원금: 일반계좌총투자원금,
      세전총평가액: 일반계좌초기자산,
      배당세누적: Math.round(일반계좌총배당세),
      양도소득세: Math.round(일반계좌총양도세),
      총세금: Math.round(일반계좌총세금),
      세후수령액: Math.round(일반계좌세후수령액),
    },
    연금계좌투자: {
      총투자원금: 일반계좌총투자원금,
      세전총평가액: 연금계좌초기자산,
      비과세원금,
      과세대상수익: 연금계좌초기자산 - 일반계좌총투자원금,
      연금소득세: 연금계좌총세금,
      총세금: 연금계좌총세금,
      세후수령액: Math.round(연금계좌세후수령액),
    },
    절약효과: {
      세금절약액: Math.round(세금절약액),
      절약률: Math.round(절약률 * 10) / 10,
      추가수익률: Math.round(추가수익률 * 10) / 10,
    },
    연차별비교데이터,
  };
}